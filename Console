using Azure;
using Azure.AI.DocumentIntelligence;
using System;
using System.IO;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        // Set `<your-endpoint>` and `<your-key>` variables with the values from the Azure portal
        string endpoint = "<your-endpoint>";
        string key = "<your-key>";
        AzureKeyCredential credential = new AzureKeyCredential(key);
        DocumentIntelligenceClient client = new DocumentIntelligenceClient(new Uri(endpoint), credential);

        // Local file path - replace with your actual file path
        string filePath = @"C:\path\to\your\document.pdf";
        string outputFilePath = Path.Combine(
            Path.GetDirectoryName(filePath),
            $"searchable-{Path.GetFileName(filePath)}"
        );

        Console.WriteLine($"Processing document: {filePath}");
        Console.WriteLine($"Output will be saved to: {outputFilePath}");

        try
        {
            // Read the file into memory
            using var fileStream = new FileStream(filePath, FileMode.Open);
            using var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            // Create the content object using file data instead of URL
            AnalyzeDocumentContent content = new AnalyzeDocumentContent()
            {
                Base64Source = BinaryData.FromStream(memoryStream)
            };

            // Explicitly request PDF output format
            content.ContentFormat = ContentFormat.Pdf;

            // Process the document
            Console.WriteLine("Analyzing document and creating searchable PDF...");
            Operation<AnalyzeResult> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "prebuilt-layout", content);
            AnalyzeResult result = operation.Value;

            // Save the searchable PDF using stream approach
            if (result.Content != null)
            {
                Console.WriteLine("Saving searchable PDF...");
                
                // Use Stream method to handle the BinaryData
                using (Stream contentStream = result.Content.ToStream())
                using (FileStream outputStream = File.Create(outputFilePath))
                {
                    await contentStream.CopyToAsync(outputStream);
                }
                
                Console.WriteLine($"Successfully saved searchable PDF to: {outputFilePath}");
            }
            else
            {
                Console.WriteLine("No PDF content was returned from the service.");
            }

            // Display document analysis results
            Console.WriteLine("\nDocument Analysis Results:");
            foreach (DocumentPage page in result.Pages)
            {
                Console.WriteLine($"Document Page {page.PageNumber} has {page.Lines.Count} line(s), {page.Words.Count} word(s)," +
                    $" and {page.SelectionMarks.Count} selection mark(s).");
                // Rest of the analysis code...
            }
            // Rest of the result analysis code...
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner error: {ex.InnerException.Message}");
            }
        }

        Console.WriteLine("Press any key to exit...");
        Console.ReadKey();
    }
}
